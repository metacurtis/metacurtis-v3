import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'
import tailwindcss from '@tailwindcss/vite'
import { VitePWA } from 'vite-plugin-pwa'
import { visualizer } from 'rollup-plugin-visualizer'
import { imagetools } from 'vite-imagetools'

export default defineConfig({
  plugins: [
    // React with better Fast Refresh
    react({
      fastRefresh: true,
      // Minimize re-renders
      jsxRuntime: 'automatic',
    }),
    
    // Tailwind CSS v4 integration - faster than PostCSS
    tailwindcss(),
    
    // Image optimization
    imagetools({
      defaultDirectives(url) {
        // Apply WebP format for better compression
        return new URLSearchParams('format=webp&q=80')
      },
    }),
    
    // PWA support for offline capability and better performance
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'robots.txt', 'apple-touch-icon.png'],
      manifest: {
        name: 'Meta Curtis V3',
        short_name: 'MC3V',
        description: 'A bold, minimal digital experience',
        theme_color: '#000000',
        background_color: '#000000',
        display: 'standalone',
        icons: [
          {
            src: '/android-chrome-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: '/android-chrome-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          },
          {
            src: '/maskable-icon.png',
            sizes: '512x512',
            type: 'image/png',
            purpose: 'maskable'
          }
        ]
      }
    }),
    
    // Bundle analysis (only in build mode)
    process.env.ANALYZE && visualizer({
      open: true,
      gzipSize: true,
      brotliSize: true,
    }),
  ],
  
  // Path aliases
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@components': resolve(__dirname, './src/components'),
      '@layouts': resolve(__dirname, './src/layouts'),
      '@hooks': resolve(__dirname, './src/hooks'),
      '@utils': resolve(__dirname, './src/utils'),
      '@assets': resolve(__dirname, './src/assets'),
    },
  },
  
  // Build optimizations
  build: {
    // Target modern browsers for smaller bundles
    target: 'es2020',
    // Only generate sourcemaps in dev mode
    sourcemap: process.env.NODE_ENV !== 'production',
    // Optimize CSS
    cssCodeSplit: true,
    // Aggressive minification
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: process.env.NODE_ENV === 'production',
        drop_debugger: process.env.NODE_ENV === 'production',
      },
    },
    // Output chunk optimization
    rollupOptions: {
      output: {
        manualChunks: {
          'vendor': ['react', 'react-dom', 'react-router-dom'],
          'animations': ['framer-motion', 'react-scroll'],
        },
        // Use hashes for better caching
        entryFileNames: 'assets/[name].[hash].js',
        chunkFileNames: 'assets/[name].[hash].js',
        assetFileNames: 'assets/[name].[hash].[ext]'
      },
    },
    // Create compressed files
    reportCompressedSize: true,
    // Pre-loading for critical assets
    assetsInlineLimit: 4096, // 4kb
    // Avoid excessive chunks
    chunkSizeWarningLimit: 1000,
  },
  
  // Server optimizations
  server: {
    port: 3000,
    // Fast Hot Module Replacement
    hmr: {
      overlay: true,
    },
    // Disable host check for dev
    strictPort: false,
    // Compression for faster dev loading
    middlewareMode: true,
  },
  
  // Preview server for testing production build
  preview: {
    port: 8080,
    // Add compression
    compress: true,
    // Add headers for better caching
    headers: {
      'Cache-Control': 'public, max-age=31536000',
    },
  },
  
  // Experimental features
  experimental: {
    // Much faster builds
    renderBuiltUrl(filename) {
      return `/${filename}`
    },
  },
})
